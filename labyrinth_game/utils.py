import math

from . import constants, player_actions


def describe_current_room(game_state):
    """–í—ã–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã"""
    current_room = game_state['current_room']
    room_data = constants.ROOMS.get(current_room, {})
    
    print(f"\n== {current_room.upper()} ==")
    
    print(room_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞'))
    
    items = room_data.get('items', [])
    if items:
        print("\n–ó–∞–º–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", ", ".join(items))
    
    exits = room_data.get('exits', {})
    if exits:
        print("\n–í—ã—Ö–æ–¥—ã:", ", ".join(exits.keys()))
    
    if room_data.get('puzzle'):
        print("\n–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –µ—Å—Ç—å –∑–∞–≥–∞–¥–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É solve).")


def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for command, description in constants.COMMANDS.items():
        print(f"  {command:<16} - {description}")


def process_command(game_state, command):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    parts = command.split(' ', 1)
    main_command = parts[0]
    argument = parts[1] if len(parts) > 1 else ""
    
    directions = ['north', 'south', 'east', 'west', 'up', 'down']
    if main_command in directions:
        main_command = 'go'
        argument = parts[0]
    
    match main_command:
        case '–æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è' | 'look':
            describe_current_room(game_state)
        
        case '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å' | 'inventory' | 'inv':
            player_actions.show_inventory(game_state)
        
        case '–∏–¥—Ç–∏' | 'go':
            if argument:
                old_room = game_state['current_room']
                success = player_actions.move_player(game_state, argument)
                if success and game_state['current_room'] != old_room:
                    random_event(game_state)
            else:
                print("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: '–∏–¥—Ç–∏ north'")
        
        case '–≤–∑—è—Ç—å' | 'take':
            if argument:
                player_actions.take_item(game_state, argument)
            else:
                print("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–∑—è—Ç—å torch'")
        
        case '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å' | 'use':
            if argument:
                player_actions.use_item(game_state, argument)
            else:
                print("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å torch'")
        
        case '—Ä–µ—à–∏—Ç—å' | 'solve':
            current_room = game_state['current_room']
            if current_room == 'treasure_room':
                attempt_open_treasure(game_state)
            else:
                solve_puzzle(game_state)
        
        case '–æ—Ç–∫—Ä—ã—Ç—å' | 'open':
            if game_state['current_room'] == 'treasure_room':
                attempt_open_treasure(game_state)
            else:
                print("–ù–µ—á–µ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∑–¥–µ—Å—å.")
        
        case '–ø–æ–º–æ—â—å' | 'help':
            show_help()
        
        case '–≤—ã—Ö–æ–¥' | 'exit' | 'quit':
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            game_state['game_over'] = True
        
        case _:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


def pseudo_random(seed, modulo):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—É—Å–∞"""
    sin_value = math.sin(seed * 12.9898)
    multiplied = sin_value * 43758.5453
    
    fractional = multiplied - math.floor(multiplied)
    
    result = int(fractional * modulo)
    return result


def trigger_trap(game_state):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–æ–≤—É—à–∫—É —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
    print("\nüíÄ –õ–æ–≤—É—à–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–ª —Å—Ç–∞–ª –¥—Ä–æ–∂–∞—Ç—å...")
    
    inventory = game_state['player_inventory']
    
    if inventory:
        item_index = pseudo_random(game_state['steps_taken'], len(inventory))
        lost_item = inventory.pop(item_index)
        print(f"üí• –í —Å—É–º–∞—Ç–æ—Ö–µ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏: {lost_item}!")
        
        if inventory:
            print(f"üì¶ –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –æ—Å—Ç–∞–ª–æ—Å—å: {len(inventory)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        else:
            print("üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç!")
    else:
        print("üí• –í—ã –ø–æ–ª—É—á–∏–ª–∏ —É–¥–∞—Ä –æ—Ç –ª–æ–≤—É—à–∫–∏!")
        damage_chance = pseudo_random(game_state['steps_taken'], 10)
        
        if damage_chance < 3:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
            game_state['game_over'] = True
        else:
            print("‚úÖ –í–∞–º –ø–æ–≤–µ–∑–ª–æ! –í—ã —É—Ü–µ–ª–µ–ª–∏, –Ω–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ.")


def random_event(game_state):
    """–°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
    event_chance = pseudo_random(game_state['steps_taken'], 10)
    
    if event_chance == 0:
        event_type = pseudo_random(game_state['steps_taken'] + 1, 3)
        
        current_room = game_state['current_room']
        room_data = constants.ROOMS.get(current_room, {})
        inventory = game_state['player_inventory']
        
        if event_type == 0:
            print("\n‚ú® –í—ã –∑–∞–º–µ—Ç–∏–ª–∏ —á—Ç–æ-—Ç–æ –±–ª–µ—Å—Ç—è—â–µ–µ –Ω–∞ –ø–æ–ª—É...")
            print("üí∞ –í—ã –Ω–∞—à–ª–∏ –º–æ–Ω–µ—Ç–∫—É!")
            if 'items' not in room_data:
                room_data['items'] = []
            room_data['items'].append('coin')
            
        elif event_type == 1:
            print("\nüëÇ –í—ã —Å–ª—ã—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω–Ω—ã–π —à–æ—Ä–æ—Ö –≤ —Ç–µ–º–Ω–æ—Ç–µ...")
            if 'sword' in inventory:
                print("‚öîÔ∏è –í—ã –¥–æ—Å—Ç–∞–µ—Ç–µ –º–µ—á, –∏ —Å—É—â–µ—Å—Ç–≤–æ —É–±–µ–≥–∞–µ—Ç!")
            else:
                print("üò® –í–∞–º —Å—Ç–∞–ª–æ –Ω–µ –ø–æ —Å–µ–±–µ...")
                
        elif event_type == 2:
            print("\n‚ö†Ô∏è –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø–ª–∏—Ç—É...")
            if current_room == 'trap_room' and 'torch' not in inventory:
                print("üî¶ –ë–µ–∑ —Ñ–∞–∫–µ–ª–∞ –≤—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –ª–æ–≤—É—à–∫—É –≤–æ–≤—Ä–µ–º—è!")
                trigger_trap(game_state)
            else:
                print("‚úÖ –ö —Å—á–∞—Å—Ç—å—é, –ª–æ–≤—É—à–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π.")


def solve_puzzle(game_state):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–≥–∞–¥–æ–∫ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    current_room = game_state['current_room']
    room_data = constants.ROOMS.get(current_room, {})
    puzzle = room_data.get('puzzle')
    
    if not puzzle:
        print("–ó–∞–≥–∞–¥–æ–∫ –∑–¥–µ—Å—å –Ω–µ—Ç.")
        return False
    
    question, correct_answer = puzzle
    
    print(f"\n{question}")
    user_answer = player_actions.get_input("–í–∞—à –æ—Ç–≤–µ—Ç: ").strip().lower()
    
    is_correct = False
    if correct_answer in constants.PUZZLE_ALTERNATIVES:
        alternatives = constants.PUZZLE_ALTERNATIVES[correct_answer]
        is_correct = user_answer in alternatives
    else:
        is_correct = user_answer == correct_answer.lower()
    
    if is_correct:
        print("üéâ –í–µ—Ä–Ω–æ! –ó–∞–≥–∞–¥–∫–∞ —Ä–µ—à–µ–Ω–∞.")
        room_data['puzzle'] = None
        
        if current_room == 'hall':
            print("üéÅ –ü—å–µ–¥–µ—Å—Ç–∞–ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 'silver_key'!")
            game_state['player_inventory'].append('silver_key')
        elif current_room == 'trap_room':
            print("üéÅ –õ–æ–≤—É—à–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–π—Ç–∏.")
        elif current_room == 'library':
            print("üéÅ –°–≤–∏—Ç–æ–∫ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ 'magic_scroll'!")
            game_state['player_inventory'].append('magic_scroll')
        elif current_room == 'garden':
            print("üéÅ –ò–∑ —Ñ–æ–Ω—Ç–∞–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è 'crystal_shard'!")
            game_state['player_inventory'].append('crystal_shard')
        elif current_room == 'observatory':
            print("üéÅ –¢–µ–ª–µ—Å–∫–æ–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è! –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ 'star_key'!")
            game_state['player_inventory'].append('star_key')
        elif current_room == 'forge':
            print("üéÅ –í—ã —Å–æ–∑–¥–∞–ª–∏ 'master_key'!")
            game_state['player_inventory'].append('master_key')
        elif current_room == 'maze_center':
            print("üéÅ –ê–ª—Ç–∞—Ä—å —Å–≤–µ—Ç–∏—Ç—Å—è! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 'ancient_artifact'!")
            game_state['player_inventory'].append('ancient_artifact')
        else:
            print("üéâ –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.")
        
        return True
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")
        if current_room == 'trap_room':
            print("üíÄ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–æ–≤—É—à–∫—É!")
            trigger_trap(game_state)
        else:
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return False


def attempt_open_treasure(game_state):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏"""
    current_room = game_state['current_room']
    
    if current_room != 'treasure_room':
        print("–ó–¥–µ—Å—å –Ω–µ—Ç —Å—É–Ω–¥—É–∫–∞ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏.")
        return False
    
    room_data = constants.ROOMS.get(current_room, {})
    items = room_data.get('items', [])
    
    if 'treasure_chest' not in items:
        print("–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç!")
        return True
    
    if 'rusty_key' in game_state['player_inventory']:
        print("üîë –í—ã –ø—Ä–∏–º–µ–Ω—è–µ—Ç–µ –∫–ª—é—á, –∏ –∑–∞–º–æ–∫ —â—ë–ª–∫–∞–µ—Ç. –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!")
        items.remove('treasure_chest')
        print("üéä –í —Å—É–Ω–¥—É–∫–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        game_state['game_over'] = True
        return True
    
    print("üîí –°—É–Ω–¥—É–∫ –∑–∞–ø–µ—Ä—Ç. –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–ª—é—á–∞.")
    choice_input = "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥? (–¥–∞/–Ω–µ—Ç): "
    choice = player_actions.get_input(choice_input).strip().lower()
    
    if choice in ['–¥–∞', 'yes', 'y']:
        puzzle = room_data.get('puzzle')
        if puzzle:
            question, correct_answer = puzzle
            print(f"\n{question}")
            user_code = player_actions.get_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ").strip()
            
            is_correct = False
            if correct_answer in constants.PUZZLE_ALTERNATIVES:
                alternatives = constants.PUZZLE_ALTERNATIVES[correct_answer]
                is_correct = user_code in alternatives
            else:
                is_correct = user_code.lower() == correct_answer.lower()
            
            if is_correct:
                print("üéâ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è!")
                items.remove('treasure_chest')
                print("üéä –í —Å—É–Ω–¥—É–∫–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
                game_state['game_over'] = True
                return True
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –°—É–Ω–¥—É–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–ø–µ—Ä—Ç—ã–º.")
                return False
        else:
            print("‚ùå –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥. –ù—É–∂–µ–Ω –∫–ª—é—á.")
            return False
    else:
        print("–í—ã –æ—Ç—Å—Ç—É–ø–∞–µ—Ç–µ –æ—Ç —Å—É–Ω–¥—É–∫–∞.")
        return False